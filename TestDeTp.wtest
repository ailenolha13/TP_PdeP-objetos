import TpObjetos.*
//Test de Gandalf
describe "Tests de gandalf" {
  test "Poder de Gandalf con toda la vida y todas sus armas" {
    gandalf.vida(100)
    assert.equals(2900, gandalf.poder())
  }
  test "Poder de Gandalf sin armas y con 80 de vida" {
    gandalf.sacarArma(baston)
    gandalf.sacarArma(espada)
    gandalf.vida(80)
    assert.equals(1200, gandalf.poder())
  }
  test "Poder de Gandalf con 5 de vida y su báculo" {
    gandalf.sacarArma(espada)
    gandalf.vida(5)
    assert.equals(2300, gandalf.poder())
  }
  test "Poder de Gandalf con 30 de vida, su báculo y su espada pero versión enana" {
    espada.origen(enano)
    gandalf.vida(30)
    assert.equals(1650, gandalf.poder())
  }
}

//Tests de Zonas y Caminos
describe "Tests de zonas y caminos" {
  test "gandalf full vida y con sus armas, puede atravesar Lebennin" {
    gandalf.agregarArma(baston)
    gandalf.agregarArma(espada)
    gandalf.vida(100)
    assert.equals(true, lebennin.atravesarZona(gandalf))
  }
  test "gandalf sin armas y con 11 de vida, puede atravesar Lebennin" {
    gandalf.sacarArma(baston)
    gandalf.sacarArma(espada)
    gandalf.vida(11)
    assert.equals(false, lebennin.atravesarZona(gandalf))
  }
  test "gandalf sin armas y con 11 de vida, puede atravesar Minas Tirith" {
    gandalf.sacarArma(baston)
    gandalf.sacarArma(espada)
    gandalf.vida(11)
    assert.equals(false, minasTirith.atravesarZona(gandalf))
  }
  test "Gandalf full vida y con sus armas, puede atravesar camino compuesto Lebennin-Minas Tirith" {
    gandalf.agregarArma(baston)
    gandalf.agregarArma(espada)
    gandalf.vida(100)
    gondor.definirCamino(lebennin, minasTirith)
    assert.equals(true, gondor.puedeAtravesarZonas(gandalf))
  }
  test "Gandalf full vida y con sus armas, atraviesa el camino compuesto por Lebennin y Minas Tirith" {
    gandalf.agregarArma(baston)
    gandalf.agregarArma(espada)
    gondor.definirCamino(lebennin, minasTirith)
    gondor.recorrerCamino(gandalf)
    assert.equals(90, gandalf.vida())
  }
}

// Tests de Tom:
describe "Tests de Tom Bombadil" {
  test "Tom puede atravesar Lebennin" {
    assert.equals(true, tomBombadil.atravesarZona(lebennin))
  }
  test "Tom atraviesa el camino de Gondor (Lebennin a Minas Tirith)" {
    gondor.definirCamino(lebennin, minasTirith)
    gondor.recorrerCamino(tomBombadil)
    assert.equals(false, tomBombadil.consecuenciaZona(gondor))
  }
  test "Tom atraviesa el camino de Gondor (Lebennin a Lossarnach)" {
    gondor.definirCamino(lebennin, lossarnach)
    gondor.recorrerCamino(tomBombadil)
    assert.equals(false, tomBombadil.consecuenciaZona(gondor))
  }
    test "Tom atraviesa el camino de Gondor (Lossarnach a Minas Tirith)" {
    gondor.definirCamino(lossarnach, minasTirith)
    gondor.recorrerCamino(tomBombadil)
    assert.equals(false, tomBombadil.consecuenciaZona(gondor))
  }
}

 // Arcos
  const arco1 = new Arco(longitud = 110)
  // Hachas
  const hacha1 = new Hacha(largo=50,peso=5)
  const hacha2 = new Hacha(largo=70,peso=5)
  // Dagas
  const daga1 = new Daga(multiplicador=15,origen=enano)
  const daga2 = new Daga(multiplicador=10,origen=enano)
  // Espadas
  const espada1 = new Espada(multiplicador=15,origen=enano)
  const espada2 = new Espada(multiplicador=8)
  const espada3 = new Espada(multiplicador=12)
  const anduril = new Espada(multiplicador=18)
  const glamdring = new Espada(multiplicador=10)
  // Baculos
  const baculo1 = new Baculo(poder=400)
  // Guerreros
  const frodo = new Hobbit(vida=60,armas=[espada2])
  const gimil = new Enano(vida=75,armas=[hacha2,hacha2],factor=3)
  const legolas = new Elfo(vida=80,armas=[arco1,espada3],destrezaPropia=1)
  const aragorn = new Humano(vida=85,armas=[anduril,daga2],limitador=20)
  const _gandalf = new Maiar(vida=100,armas=[glamdring,baculo1])
  const boromir = new Humano(vida=20,armas=[daga2],limitador=0)

describe "Test de armas" {
  test "Espada con multiplicador de 15 y de origen Enano" {
    assert.equals(300, espada1.poder())
  }
  test "Daga con multiplicador de 15 y origen Enano" {
    assert.equals(150, daga1.poder())
  }
  test "Hacha con mango de 50 cm, con una hoja de 5kg" {
    assert.equals(250, hacha1.poder())
  }
  test "Arco con longitud de 110cm" {
    assert.equals(440, arco1.poder())
  }
  test "Modificar la tensión del arco a 35kg. Mismo arco que antes…" {
    arco1.reducirTension(5)
    assert.equals(385, arco1.poder())
  }
}
describe "Test de Guerreros" {
  test "Poder de Frodo" {
    assert.equals(300, frodo.poder())
  }
  test "Poder de Gimil" {
    assert.equals(2175, gimil.poder())
  }
  test "poder de Legolas" {
    assert.equals(2480, legolas.poder())
  }
  test "poder de Aragorn" {
    assert.equals(2720, aragorn.poder())
  }
  test "poder de Gandalf" {
    assert.equals(2900, _gandalf.poder())
  }
  test "Gandalf con 10 de vida, y todas sus armas" {
    _gandalf.vida(10)
    assert.equals(4400, _gandalf.poder())
  }
  test "Poder de Légolas que obtiene medio punto de destreza propia" {
    legolas.aumentarDestrezaPropia(0.5)
    assert.equals(2880, legolas.poder())
  }
}

//Sin Requerimientos
const sinRequerimiento = new Requerimiento()

//Requerimientos Item: Gondor
const diezLembas = new RequerimientoItem(cantidad = 10, nombre = "Lembas")
//Region Gondor
const gondorRegion = new Region(nombre = "Gondor")
//Zona Gondor
const belfalasZona = new Zona(nombre = "Belfalas", requerimiento = sinRequerimiento, region = gondorRegion, efecto = new EfectoItem(item = 'Pan de lembas', cantidad = 1), limitaCon = ["Lebennin","Lamedon"])
const lebenninZona = new Zona(nombre = "Lebennin", requerimiento = poderMilQuinientos, region = gondorRegion, efecto = null, limitaCon = ["Belfalas", "Minas Tirith"])
const minasTirithZona = new Zona(nombre = "Minas Tirith", requerimiento = diezLembas,
region = gondorRegion, efecto = new EfectoVida(variacionVida = -15))

//Requerimientos Item: Rohan
const tresCapasElficas = new RequerimientoItem(cantidad = 3, nombre = "Capas Elficas")
//Region Rohan
const rohanRegion = new Region(nombre = "Rohan")
//Zona Rohan
const bosqueDeFangornZona = new Zona(nombre = "Bosque de Fangorn", requerimiento = tieneArmas, region = rohanRegion, efecto = new EfectoItem(item = 'Capas Elficas', cantidad = -1), limitaCon = ["Edoras","Estemnet"])
const edorasZona = new Zona(nombre = "Edoras", requerimiento = sinRequerimiento, region = rohanRegion, efecto = new EfectoItem(item = 'Vino caliente', cantidad = 1), limitaCon = ["Bosque de Fangorn","Estemnet","Lamedon"])
const estemnetZona = new Zona(nombre = "Estemnet", requerimiento = tresCapasElficas, region = rohanRegion, efecto = new EfectoVida(variacionVida = 2), limitaCon = ["Edoras","Bosque de Fangorn"])
const parthGalen = new Zona(nombre = 'Parth Galen', requerimiento = sinRequerimiento, region = rohanRegion, efecto = new EfectoVida(variacionVida = -21))
const lamedon = new Zona(nombre = "Lamedon",requerimiento = sinRequerimiento, region = rohanRegion,efecto = null ,limitaCon = ["Edoras", "Belfalas"])

//Camino
const camino = new Camino(zonas = [bosqueDeFangornZona, edorasZona, belfalasZona, minasTirithZona])
const camino1 = new Camino(zonas = [bosqueDeFangornZona, edorasZona, lamedon, belfalasZona, lebenninZona,minasTirithZona])

// Guerreros
const frodo1 = new Hobbit(vida=60,armas=[espada2], items=["Lembas","Lembas", "Capas Elficas", "Anillo Unico", "Hoja de Lorien", "Cota de Mithrill"])
const gimil1 = new Enano(vida=75,armas=[hacha2,hacha2],factor=3, items=["Lembas", "Capas Elficas", "Lembas"])
const legolas1 = new Elfo(vida=80,armas=[arco1,espada3],destrezaPropia=1, items=["Lembas", "Capas Elficas", "Lembas","Lembas"])
const aragorn1 = new Humano(vida=85,armas=[anduril,daga2],limitador=20, items=["Lembas", "Capas Elficas", "Anillo Barahir", "Lembas", "Estrella del Atardecer"])
const _gandalf1 = new Maiar(vida=100,armas=[glamdring,baculo1], items=["Capas Elficas", "Lembas", "Mapa Thor", "Anillo Rojo", "Lembas"])

//Grupo de guerreros
const grupoGuerreros1 = new GrupoGuerreros(guerreros = [frodo1, gimil1, legolas1, aragorn1], caminosRecorridos = camino)
const grupoGuerreros2 = new GrupoGuerreros(guerreros = [_gandalf1], caminosRecorridos = camino)
const grupoGuerreros3 = new GrupoGuerreros(guerreros = [frodo1, gimil1, legolas1, aragorn1, _gandalf1], caminosRecorridos = camino)
const grupoGuerreros4 = new GrupoGuerreros(guerreros = [boromir])

describe "Tests de Caminos" {
  test "Un grupo no puede pasar por una zona por requerimiento de item" {
    assert.equals(false, minasTirithZona.requerimiento().evaluarRequerimiento(grupoGuerreros1))
  }

  test "Un grupo no puede pasar por una zona por requerimiento de guerrero" {
    assert.equals(false, lebenninZona.requerimiento().evaluarRequerimiento(grupoGuerreros2))
  }

//  test "Un grupo puede entrar al bosque"{
//    assert.equals(true, bosqueDeFangornZona.requerimiento().evaluarRequerimiento(grupoGuerreros2))
//  }
   test "Un grupo puede pasar por una zona" {
    assert.equals(true, edorasZona.requerimiento().tipoRequerimiento() == 0)
  }

   test "Un grupo no puede atravesar un camino" {
     assert.equals(false, camino.puedeAtravesarCamino(grupoGuerreros2)) 
   }

   test "Un grupo puede atravesar un camino" {
     assert.equals(true, camino.puedeAtravesarCamino(grupoGuerreros3)) 
   }
}

describe "Tests de Efectos de Zonas" {
  test "Un grupo que no puede atravesar una zona, produce un error al intentar pasar." {
    assert.throwsException({minasTirithZona.intentarAtravesarZona(grupoGuerreros4)})
  }

  test "Un integrante sufre las consecuencias de pérdida de ítem, al atravesar una zona con tal efecto." {
    assert.equals(1,_gandalf1.obtenerCantidadItemIguales("Capas Elficas"))
    bosqueDeFangornZona.intentarAtravesarZona(grupoGuerreros3)
    assert.equals(0,_gandalf1.obtenerCantidadItemIguales("Capas Elficas"))
  }
  test "Un integrante no pierde ningún ítem, debido a que no lo posee." {
    const itemsIniciales = boromir.items()
    bosqueDeFangornZona.intentarAtravesarZona(grupoGuerreros4)
    assert.equals(itemsIniciales, boromir.items())
  }
  test "Boromir, queda fuera de combate luego de atravesar Parth Galen." {
    parthGalen.intentarAtravesarZona(grupoGuerreros4)
    assert.equals(true, boromir.estaFueraDeCombate())
  }
}

describe "Test de caminos limitrofes" {
  test "Un grupo que quiere atravesar un camino inválido debe producir un error" {
    assert.throwsException({camino.intentarAtravezarCamino(grupoGuerreros3)})
  }
  
}